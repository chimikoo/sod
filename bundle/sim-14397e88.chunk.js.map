{"version":3,"file":"sim-14397e88.chunk.js","sources":["../../../ui/enhancement_shaman/inputs.ts","../../../ui/enhancement_shaman/presets.ts","../../../ui/enhancement_shaman/sim.ts"],"sourcesContent":["import { Spec } from '../core/proto/common.js';\nimport { ShamanSyncType } from '../core/proto/shaman.js';\n\nimport * as InputHelpers from '../core/components/input_helpers.js';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const SyncTypeInput = InputHelpers.makeSpecOptionsEnumInput<Spec.SpecEnhancementShaman>({\n\tfieldName: 'syncType',\n\tlabel: 'Sync/Stagger Setting',\n\tlabelTooltip:\n\t\t`Choose your sync or stagger option Perfect\n\t\t<ul>\n\t\t\t<li><div>Auto: Will auto pick sync options based on your weapons attack speeds</div></li>\n\t\t\t<li><div>None: No Sync or Staggering, used for mismatched weapon speeds</div></li>\n\t\t\t<li><div>Perfect Sync: Makes your weapons always attack at the same time, for match weapon speeds</div></li>\n\t\t\t<li><div>Delayed Offhand: Adds a slight delay to the offhand attacks while staying within the 0.5s flurry ICD window</div></li>\n\t\t</ul>`,\n\tvalues: [\n\t\t{ name: \"Automatic\", value: ShamanSyncType.Auto },\n\t\t{ name: 'None', value: ShamanSyncType.NoSync },\n\t\t{ name: 'Perfect Sync', value: ShamanSyncType.SyncMainhandOffhandSwings },\n\t\t{ name: 'Delayed Offhand', value: ShamanSyncType.DelayOffhandSwings },\n\t],\n});\n","import { CURRENT_PHASE, Phase } from '../core/constants/other.js';\nimport {\n\tConsumes,\n\tDebuffs,\n\tRaidBuffs,\n\tTristateEffect,\n\tWeaponImbue\n} from '../core/proto/common.js';\nimport { SavedTalents } from '../core/proto/ui.js';\n\nimport {\n\tEnhancementShaman_Options as EnhancementShamanOptions,\n\tShamanShield,\n\tShamanSyncType,\n} from '../core/proto/shaman.js';\n\nimport * as PresetUtils from '../core/preset_utils.js';\n\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\n\n///////////////////////////////////////////////////////////////////////////\n//                                 Gear Presets\n///////////////////////////////////////////////////////////////////////////\n\nimport BlankGear from './gear_sets/blank.gear.json';\nimport Phase1Gear from './gear_sets/phase_1.gear.json';\nimport Phase2Gear from './gear_sets/phase_2.gear.json';\n\nexport const GearBlank = PresetUtils.makePresetGear('Blank', BlankGear);\nexport const GearPhase1 = PresetUtils.makePresetGear('Phase 1', Phase1Gear);\nexport const GearPhase2 = PresetUtils.makePresetGear('Phase 2', Phase2Gear);\n\nexport const GearPresets = {\n  [Phase.Phase1]: [\n    GearPhase1,\n  ],\n  [Phase.Phase2]: [\n\t\tGearPhase2,\n  ]\n};\n\nexport const DefaultGear = GearPresets[CURRENT_PHASE][0];\n\n///////////////////////////////////////////////////////////////////////////\n//                                 APL Presets\n///////////////////////////////////////////////////////////////////////////\n\nimport Phase1APL from './apls/phase_1.apl.json';\nimport Phase2APL from './apls/phase_2.apl.json';\n\nexport const APLPhase1 = PresetUtils.makePresetAPLRotation('Phase 1', Phase1APL);\nexport const APLPhase2 = PresetUtils.makePresetAPLRotation('Phase 2', Phase2APL);\n\nexport const APLPresets = {\n  [Phase.Phase1]: [\n    APLPhase1,\n  ],\n  [Phase.Phase2]: [\n\t\tAPLPhase2,\n  ]\n};\n\nexport const DefaultAPLs: Record<number, PresetUtils.PresetRotation> = {\n  25: APLPresets[Phase.Phase1][0],\n  40: APLPresets[Phase.Phase2][0],\n};\n\n///////////////////////////////////////////////////////////////////////////\n//                                 Talent Presets\n///////////////////////////////////////////////////////////////////////////\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/classic/talent-calc and copy the numbers in the url.\n\nexport const TalentsPhase1 = {\n\tname: 'Phase 1',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '-5005202101',\n\t}),\n};\n\nexport const TalentsPhase2 = {\n\tname: 'Phase 2',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '-5005202105023051',\n\t}),\n};\n\nexport const TalentPresets = {\n  [Phase.Phase1]: [\n    TalentsPhase1,\n  ],\n  [Phase.Phase2]: [\n    TalentsPhase2,\n  ]\n};\n\nexport const DefaultTalents = TalentPresets[CURRENT_PHASE][0];\n\n///////////////////////////////////////////////////////////////////////////\n//                                 Options\n///////////////////////////////////////////////////////////////////////////\n\nexport const DefaultOptions = EnhancementShamanOptions.create({\n\tshield: ShamanShield.LightningShield,\n\tsyncType: ShamanSyncType.Auto,\n});\n\nexport const DefaultConsumes = Consumes.create({\n\tmainHandImbue: WeaponImbue.WindfuryWeapon,\n  offHandImbue: WeaponImbue.WindfuryWeapon,\n});\n\nexport const DefaultRaidBuffs = RaidBuffs.create({\n\tarcaneBrilliance: true,\n\taspectOfTheLion: true,\n\tbattleShout: TristateEffect.TristateEffectImproved,\n\tdivineSpirit: true,\n\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\n\tleaderOfThePack: true,\n\tmanaSpringTotem: TristateEffect.TristateEffectImproved,\n\tmoonkinAura: true,\n\tstrengthOfEarthTotem: TristateEffect.TristateEffectImproved,\n\ttrueshotAura: true,\n});\n\nexport const DefaultDebuffs = Debuffs.create({\n\tcurseOfElements: true,\n\tcurseOfRecklessness: true,\n\tdreamstate: true,\n\tfaerieFire: true,\n\timprovedScorch: true,\n\tsunderArmor: true,\n});\n\nexport const OtherDefaults = {\n};\n","import { ShamanShieldInput } from '../core/components/inputs/shaman_shields.js';\nimport { CURRENT_PHASE, Phase } from '../core/constants/other.js';\nimport { IndividualSimUI, registerSpecConfig } from '../core/individual_sim_ui.js';\nimport { Player } from '../core/player.js';\nimport { APLRotation } from '../core/proto/apl.js';\nimport {\n\tClass,\n\tFaction,\n\tIndividualBuffs,\n\tItemSlot,\n\tPartyBuffs,\n\tPseudoStat,\n\tRace,\n\tSpec,\n\tStat,\n} from '../core/proto/common.js';\nimport { Stats } from '../core/proto_utils/stats.js';\nimport { getSpecIcon, specNames } from '../core/proto_utils/utils.js';\n\nimport * as BuffDebuffInputs from '../core/components/inputs/buffs_debuffs';\nimport * as OtherInputs from '../core/components/other_inputs.js';\nimport * as ShamanInputs from './inputs.js';\nimport * as Presets from './presets.js';\n\nconst SPEC_CONFIG = registerSpecConfig(Spec.SpecEnhancementShaman, {\n\tcssClass: 'enhancement-shaman-sim-ui',\n\tcssScheme: 'shaman',\n\t// List any known bugs / issues here and they'll be shown on the site.\n\tknownIssues: [\n\t],\n\n\t// All stats for which EP should be calculated.\n\tepStats: [\n\t\tStat.StatIntellect,\n\t\tStat.StatAgility,\n\t\tStat.StatStrength,\n\t\tStat.StatAttackPower,\n\t\tStat.StatMeleeHit,\n\t\tStat.StatMeleeCrit,\n\t\tStat.StatMeleeHaste,\n\t\tStat.StatArmorPenetration,\n\t\tStat.StatExpertise,\n\t\tStat.StatSpellPower,\n\t\tStat.StatFirePower,\n\t\tStat.StatNaturePower,\n\t\tStat.StatSpellCrit,\n\t\tStat.StatSpellHit,\n\t\tStat.StatSpellHaste,\n\t],\n\tepPseudoStats: [\n\t\tPseudoStat.PseudoStatMainHandDps,\n\t\tPseudoStat.PseudoStatOffHandDps,\n\t],\n\t// Reference stat against which to calculate EP. I think all classes use either spell power or attack power.\n\tepReferenceStat: Stat.StatAttackPower,\n\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\tdisplayStats: [\n\t\tStat.StatHealth,\n\t\tStat.StatStamina,\n\t\tStat.StatStrength,\n\t\tStat.StatAgility,\n\t\tStat.StatIntellect,\n\t\tStat.StatAttackPower,\n\t\tStat.StatMeleeHit,\n\t\tStat.StatMeleeCrit,\n\t\tStat.StatMeleeHaste,\n\t\tStat.StatExpertise,\n\t\tStat.StatArmorPenetration,\n\t\tStat.StatSpellPower,\n\t\tStat.StatSpellHit,\n\t\tStat.StatSpellCrit,\n\t\tStat.StatSpellHaste,\n\t],\n\n\tdefaults: {\n\t\t// Default equipped gear.\n\t\tgear: Presets.DefaultGear.gear,\n\t\t// Default EP weights for sorting gear in the gear picker.\n\t\tepWeights: Stats.fromMap({\n\t\t\t[Stat.StatIntellect]: 1.92,\n\t\t\t[Stat.StatAgility]: .46,\n\t\t\t[Stat.StatStrength]: 1.92,\n\t\t\t[Stat.StatSpellPower]: .89,\n\t\t\t[Stat.StatFirePower]: .46,\n\t\t\t[Stat.StatNaturePower]: .43,\n\t\t\t[Stat.StatSpellHit]: 0, //default EP assumes cap\n\t\t\t[Stat.StatSpellCrit]: 1.59,\n\t\t\t[Stat.StatSpellHaste]: 0,\n\t\t\t[Stat.StatAttackPower]: 1.0,\n\t\t\t[Stat.StatMeleeHit]: 10.85,\n\t\t\t[Stat.StatMeleeCrit]: 6.63,\n\t\t\t[Stat.StatMeleeHaste]: 8.66, //haste is complicated\n\t\t\t[Stat.StatArmorPenetration]: 0.12,\n\t\t\t[Stat.StatExpertise]: 1.29, //default EP assumes cap\n\t\t}, {\n\t\t\t[PseudoStat.PseudoStatMainHandDps]: 6.80,\n\t\t\t[PseudoStat.PseudoStatOffHandDps]: 5.19,\n\t\t}),\n\t\t// Default consumes settings.\n\t\tconsumes: Presets.DefaultConsumes,\n\t\t// Default talents.\n\t\ttalents: Presets.DefaultTalents.data,\n\t\t// Default spec-specific settings.\n\t\tspecOptions: Presets.DefaultOptions,\n\t\t// Default raid/party buffs settings.\n\t\traidBuffs: Presets.DefaultRaidBuffs,\n\t\tpartyBuffs: PartyBuffs.create({\n\t\t}),\n\t\tindividualBuffs: IndividualBuffs.create({\n\t\t}),\n\t\tdebuffs: Presets.DefaultDebuffs,\n\t},\n\n\t// IconInputs to include in the 'Player' section on the settings tab.\n\tplayerIconInputs: [\n\t\tShamanShieldInput<Spec.SpecEnhancementShaman>(),\n\t],\n\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\tincludeBuffDebuffInputs: [\n\t\tBuffDebuffInputs.BlessingOfWisdom,\n\t\tBuffDebuffInputs.ManaSpringTotem,\n\t\tBuffDebuffInputs.SpiritBuff,\n\t],\n\texcludeBuffDebuffInputs: [\n\t\tBuffDebuffInputs.BleedDebuff,\n\t],\n\t// Inputs to include in the 'Other' section on the settings tab.\n\totherInputs: {\n\t\tinputs: [\n\t\t\tShamanInputs.SyncTypeInput,\n\t\t\tOtherInputs.TankAssignment,\n\t\t\tOtherInputs.InFrontOfTarget,\n\t\t],\n\t},\n\titemSwapSlots: [ItemSlot.ItemSlotMainHand, ItemSlot.ItemSlotOffHand],\n\tcustomSections: [\n\t\t// TotemsSection,\n\t],\n\tencounterPicker: {\n\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\tshowExecuteProportion: false,\n\t},\n\n\tpresets: {\n\t\t// Preset talents that the user can quickly select.\n\t\ttalents: [\n\t\t\t...Presets.TalentPresets[Phase.Phase1],\n\t\t\t...Presets.TalentPresets[CURRENT_PHASE],\n\t\t],\n\t\t// Preset rotations that the user can quickly select.\n\t\trotations: [\n\t\t\t...Presets.APLPresets[Phase.Phase1],\n\t\t\t...Presets.APLPresets[CURRENT_PHASE],\n\t\t],\n\t\t// Preset gear configurations that the user can quickly select.\n\t\tgear: [\n\t\t\tPresets.GearBlank,\n\t\t\t...Presets.GearPresets[Phase.Phase1],\n\t\t\t...Presets.GearPresets[CURRENT_PHASE],\n\t\t],\n\t},\n\n\tautoRotation: (player): APLRotation => {\n\t\treturn Presets.DefaultAPLs[player.getLevel()].rotation.rotation!;\n\t},\n\n\traidSimPresets: [\n\t\t{\n\t\t\tspec: Spec.SpecBalanceDruid,\n\t\t\ttooltip: specNames[Spec.SpecBalanceDruid],\n\t\t\tdefaultName: 'Balance',\n\t\t\ticonUrl: getSpecIcon(Class.ClassDruid, 0),\n\n\t\t\ttalents: Presets.DefaultTalents.data,\n\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\totherDefaults: Presets.OtherDefaults,\n\t\t\tdefaultFactionRaces: {\n\t\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t\t[Faction.Alliance]: Race.RaceNightElf,\n\t\t\t\t[Faction.Horde]: Race.RaceTauren,\n\t\t\t},\n\t\t\tdefaultGear: {\n\t\t\t\t[Faction.Unknown]: {},\n\t\t\t\t[Faction.Alliance]: {\n\t\t\t\t\t1: Presets.GearPresets[Phase.Phase1][0].gear,\n\t\t\t\t},\n\t\t\t\t[Faction.Horde]: {\n\t\t\t\t\t1: Presets.GearPresets[Phase.Phase1][0].gear,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t],\n})\n\nexport class EnhancementShamanSimUI extends IndividualSimUI<Spec.SpecEnhancementShaman> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecEnhancementShaman>) {\n\t\tsuper(parentElem, player, SPEC_CONFIG);\n\t}\n}\n"],"names":["SyncTypeInput","InputHelpers.makeSpecOptionsEnumInput","fieldName","label","labelTooltip","values","name","value","ShamanSyncType","Auto","NoSync","SyncMainhandOffhandSwings","DelayOffhandSwings","GearBlank","PresetUtils.makePresetGear","GearPhase1","Phase1Gear","GearPhase2","Phase2Gear","GearPresets","Phase","Phase1","Phase2","DefaultGear","CURRENT_PHASE","APLPhase1","PresetUtils.makePresetAPLRotation","Phase1APL","APLPhase2","Phase2APL","APLPresets","DefaultAPLs","TalentsPhase1","data","SavedTalents","create","talentsString","TalentsPhase2","TalentPresets","DefaultTalents","DefaultOptions","EnhancementShamanOptions","shield","ShamanShield","LightningShield","syncType","DefaultConsumes","Consumes","mainHandImbue","WeaponImbue","WindfuryWeapon","offHandImbue","DefaultRaidBuffs","RaidBuffs","arcaneBrilliance","aspectOfTheLion","battleShout","TristateEffect","TristateEffectImproved","divineSpirit","giftOfTheWild","leaderOfThePack","manaSpringTotem","moonkinAura","strengthOfEarthTotem","trueshotAura","DefaultDebuffs","Debuffs","curseOfElements","curseOfRecklessness","dreamstate","faerieFire","improvedScorch","sunderArmor","SPEC_CONFIG","registerSpecConfig","Spec","SpecEnhancementShaman","cssClass","cssScheme","knownIssues","epStats","Stat","StatIntellect","StatAgility","StatStrength","StatAttackPower","StatMeleeHit","StatMeleeCrit","StatMeleeHaste","StatArmorPenetration","StatExpertise","StatSpellPower","StatFirePower","StatNaturePower","StatSpellCrit","StatSpellHit","StatSpellHaste","epPseudoStats","PseudoStat","PseudoStatMainHandDps","PseudoStatOffHandDps","epReferenceStat","displayStats","StatHealth","StatStamina","defaults","gear","Presets.DefaultGear","epWeights","Stats","fromMap","consumes","Presets.DefaultConsumes","talents","Presets.DefaultTalents","specOptions","Presets.DefaultOptions","raidBuffs","Presets.DefaultRaidBuffs","partyBuffs","PartyBuffs","individualBuffs","IndividualBuffs","debuffs","Presets.DefaultDebuffs","playerIconInputs","ShamanShieldInput","includeBuffDebuffInputs","BuffDebuffInputs.BlessingOfWisdom","BuffDebuffInputs.ManaSpringTotem","BuffDebuffInputs.SpiritBuff","excludeBuffDebuffInputs","BuffDebuffInputs.BleedDebuff","otherInputs","inputs","ShamanInputs.SyncTypeInput","OtherInputs.TankAssignment","OtherInputs.InFrontOfTarget","itemSwapSlots","ItemSlot","ItemSlotMainHand","ItemSlotOffHand","customSections","encounterPicker","showExecuteProportion","presets","Presets.TalentPresets","rotations","Presets.APLPresets","Presets.GearBlank","Presets.GearPresets","autoRotation","player","Presets.DefaultAPLs","getLevel","rotation","raidSimPresets","spec","SpecBalanceDruid","tooltip","specNames","defaultName","iconUrl","getSpecIcon","Class","ClassDruid","otherDefaults","defaultFactionRaces","Faction","Unknown","Race","RaceUnknown","Alliance","RaceNightElf","Horde","RaceTauren","defaultGear","EnhancementShamanSimUI","IndividualSimUI","constructor","parentElem","super"],"mappings":"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"}