import{dK as e,A as t,dL as a,dM as l,dN as n,dO as s,x as o,dP as i,T as r,c as d,dQ as p,di as c,dR as m,r as S,bD as u,bE as I,a as g,P as f,M as h,b0 as v,aA as P,ab as T,dr as A,d as w,q as R,ac as k,aq as y,da as M,u as C,df as N,S as H,l as b,C as O,ar as U}from"./detailed_results-db275737.chunk.js";import{j as E,s as D,L as W,v as B,m as J,a as x,r as F,b as L,N as G,D as q,T as j,p as z,I as _}from"./preset_utils-d92d5f36.chunk.js";import{s as Q}from"./apl_utils-ab88e2a1.chunk.js";const V=E({fieldName:"ammo",numColumns:6,values:[{value:a.AmmoNone,tooltip:"No Ammo"},{actionId:()=>t.fromItemId(3030),value:a.RazorArrow},{actionId:()=>t.fromItemId(11285),value:a.JaggedArrow},{actionId:()=>t.fromItemId(19316),value:a.IceThreadedArrow},{actionId:()=>t.fromItemId(18042),value:a.ThoriumHeadedArrow},{actionId:()=>t.fromItemId(12654),value:a.Doomshot},{actionId:()=>t.fromItemId(3033),value:a.SolidShot},{actionId:()=>t.fromItemId(11284),value:a.AccurateSlugs},{actionId:()=>t.fromItemId(19317),value:a.IceThreadedBullet},{actionId:()=>t.fromItemId(10513),value:a.MithrilGyroShot},{actionId:()=>t.fromItemId(11630),value:a.RockshardPellets},{actionId:()=>t.fromItemId(15997),value:a.ThoriumShells},{actionId:()=>t.fromItemId(13377),value:a.MiniatureCannonBalls}]}),K=E({extraCssClasses:["quiver-picker"],fieldName:"quiverBonus",numColumns:2,values:[{color:"82e89d",value:l.QuiverNone},{actionId:()=>t.fromItemId(18714),value:l.Speed15},{actionId:()=>t.fromItemId(2662),value:l.Speed14},{actionId:()=>t.fromItemId(8217),value:l.Speed13},{actionId:()=>t.fromItemId(7371),value:l.Speed12},{actionId:()=>t.fromItemId(3605),value:l.Speed11},{actionId:()=>t.fromItemId(3573),value:l.Speed10}]}),$=E({fieldName:"petType",numColumns:6,values:[{value:e.PetNone,tooltip:"No Pet"},{actionId:()=>t.fromPetName("Cat"),tooltip:"Cat",value:e.Cat},{actionId:()=>t.fromPetName("Wind Serpent"),tooltip:"Wind Serpent",value:e.WindSerpent}]}),X=D({fieldName:"petUptime",label:"Pet Uptime (%)",labelTooltip:"Percent of the fight duration for which your pet will be alive.",percent:!0}),Y=D({fieldName:"sniperTrainingUptime",label:"Sniper Training Uptime (%)",labelTooltip:"Percent of the fight duration for which you will have the buff.",percent:!0,showWhen:e=>e.getEquippedItem(o.ItemSlotLegs)?.rune?.id==i.RuneLegsSniperTraining,changeEmitter:e=>r.onAny([e.gearChangeEmitter,e.specOptionsChangeEmitter])}),Z={inputs:[W({fieldName:"type",label:"Type",values:[{name:"Single Target",value:n.SingleTarget},{name:"AOE",value:n.Aoe}]}),W({fieldName:"sting",label:"Sting",labelTooltip:"Maintains the selected Sting on the primary target.",values:[{name:"None",value:s.NoSting},{name:"Scorpid Sting",value:s.ScorpidSting},{name:"Serpent Sting",value:s.SerpentSting}],showWhen:e=>e.getSimpleRotation().type==n.SingleTarget}),B({fieldName:"multiDotSerpentSting",label:"Multi-Dot Serpent Sting",labelTooltip:"Casts Serpent Sting on multiple targets",changeEmitter:e=>r.onAny([e.rotationChangeEmitter,e.talentsChangeEmitter])})]},ee={items:[{id:211510},{id:20444},{id:2264},{id:5193},{id:211512,rune:409580},{id:6198},{id:211423,rune:409368},{id:209421},{id:13114,rune:415320},{id:211511},{id:211467},{id:1491},{id:211449},{id:4381},{id:209562},{},{id:209534}]},te={type:"TypeAPL",prepullActions:[{action:{castSpell:{spellId:{spellId:14318,rank:2}}},doAtValue:{const:{val:"-1.5s"}}},{action:{castSpell:{spellId:{spellId:13550,rank:3}}},doAtValue:{const:{val:"0s"}}}],priorityList:[{action:{castSpell:{spellId:{spellId:2643,rank:1}}}},{action:{castSpell:{spellId:{spellId:429867}}}},{action:{multidot:{spellId:{spellId:13550,rank:3},maxDots:3,maxOverlap:{const:{val:"0ms"}}}}},{action:{castSpell:{spellId:{spellId:14282,rank:3}}}},{action:{castSpell:{spellId:{spellId:415320}}}},{action:{castSpell:{spellId:{spellId:14262,tag:1,rank:4}}}},{action:{condition:{and:{vals:[{cmp:{op:"OpGe",lhs:{autoTimeToNext:{autoType:"Ranged"}},rhs:{const:{val:"1.5s"}}}},{not:{val:{spellIsReady:{spellId:{spellId:2643,rank:1}}}}}]}},move:{rangeFromTarget:{const:{val:"5"}}}}},{action:{condition:{cmp:{op:"OpGe",lhs:{autoTimeToNext:{autoType:"Melee"}},rhs:{const:{val:"1.5s"}}}},move:{rangeFromTarget:{const:{val:"8"}}}}}]},ae=J("P1 Beast Mastery",ee,{talentTree:0}),le=J("P1 Marksmanship",ee,{talentTree:1}),ne=J("P1 Survival",ee,{talentTree:2}),se={[d.Phase1]:[ae,le,ne],[d.Phase2]:[]},oe=se[d.Phase1][0],ie=x("Melee Weave P1",te,{talentTree:0}),re={[d.Phase1]:[ie],[d.Phase2]:[]},de={25:{0:re[d.Phase1][0],1:re[d.Phase1][0],2:re[d.Phase1][0]},40:{0:re[d.Phase1][0],1:re[d.Phase1][0],2:re[d.Phase1][0]}},pe=p.create({type:n.SingleTarget,sting:s.SerpentSting,multiDotSerpentSting:!0}),ce={name:"P1 Beast Mastery",data:c.create({talentsString:"53000200501"})},me={name:"P1 Marksmanship",data:c.create({talentsString:"-050515"})},Se={name:"P1 Survival",data:c.create({talentsString:"--33502001101"})},ue={[d.Phase1]:[ce,me,Se],[d.Phase2]:[]},Ie=ue[d.Phase1][0],ge=ue[d.Phase1][1],fe=ue[d.Phase1][2],he=Ie,ve=m.create({ammo:a.RazorArrow,petType:e.WindSerpent,petTalents:{},petUptime:1}),Pe=m.create({ammo:a.RazorArrow,petType:e.Cat,petTalents:{},petUptime:1}),Te=S.create({flask:u.FlaskUnknown,food:I.FoodUnknown}),Ae=F(H.SpecHunter,{cssClass:"hunter-sim-ui",cssScheme:"hunter",knownIssues:[],warnings:[],epStats:[g.StatStamina,g.StatIntellect,g.StatStrength,g.StatAgility,g.StatAttackPower,g.StatRangedAttackPower,g.StatMeleeHit,g.StatMeleeCrit,g.StatMeleeHaste,g.StatArmorPenetration,g.StatMP5,g.StatSpellPower],epPseudoStats:[f.PseudoStatRangedDps],epReferenceStat:g.StatRangedAttackPower,displayStats:[g.StatHealth,g.StatStamina,g.StatStrength,g.StatAgility,g.StatIntellect,g.StatAttackPower,g.StatRangedAttackPower,g.StatMeleeHit,g.StatMeleeCrit,g.StatMeleeHaste,g.StatArmorPenetration,g.StatMP5,g.StatSpellPower],modifyDisplayStats:e=>{let t=new L;t=t.addStat(g.StatMeleeCrit,1*e.getTalents().lethalShots*h);const a=e.getEquippedItem(o.ItemSlotRanged);return 3608==a?.enchant?.effectId&&(t=t.addStat(g.StatMeleeCrit,40)),e.getRace()==v.RaceDwarf&&a?.item.rangedWeaponType==P.RangedWeaponTypeGun&&(t=t.addStat(g.StatMeleeCrit,1*h)),e.getRace()==v.RaceTroll&&a?.item.rangedWeaponType==P.RangedWeaponTypeBow&&(t=t.addStat(g.StatMeleeCrit,1*h)),{talents:t}},defaults:{gear:oe.gear,epWeights:L.fromMap({[g.StatStamina]:.5,[g.StatAgility]:2.65,[g.StatIntellect]:1.1,[g.StatAttackPower]:1,[g.StatRangedAttackPower]:1,[g.StatMeleeHit]:2,[g.StatMeleeCrit]:1.5,[g.StatMeleeHaste]:1.39,[g.StatArmorPenetration]:1.32},{[f.PseudoStatRangedDps]:6.32}),consumes:Te,simpleRotation:pe,talents:he.data,specOptions:ve,raidBuffs:T.create({aspectOfTheLion:!0,arcaneBrilliance:!0,powerWordFortitude:A.TristateEffectImproved,giftOfTheWild:A.TristateEffectImproved,battleShout:A.TristateEffectImproved}),partyBuffs:w.create({}),individualBuffs:R.create({blessingOfWisdom:A.TristateEffectImproved,blessingOfMight:A.TristateEffectImproved}),debuffs:k.create({homunculi:70,faerieFire:!0})},playerIconInputs:[$,V,K],rotationInputs:Z,petConsumeInputs:[],includeBuffDebuffInputs:[G],excludeBuffDebuffInputs:[],otherInputs:{inputs:[X,Y,q,j,z]},encounterPicker:{showExecuteProportion:!1},presets:{talents:[...ue[d.Phase1],...ue[y]],rotations:[...re[d.Phase1],...re[y]],gear:[...se[d.Phase1],...se[y]]},autoRotation:e=>de[e.getLevel()][e.getTalentTree()].rotation.rotation,simpleRotation:(e,t,a)=>{let[l,o]=Q(a);const i=M.fromJsonString(`{"condition":{"cmp":{"op":"OpGt","lhs":{"remainingTime":{}},"rhs":{"const":{"val":"6s"}}}},"multidot":{"spellId":{"spellId":49001},"maxDots":${t.multiDotSerpentSting?3:1},"maxOverlap":{"const":{"val":"0ms"}}}}`),r=M.fromJsonString('{"condition":{"auraShouldRefresh":{"auraId":{"spellId":3043},"maxOverlap":{"const":{"val":"0ms"}}}},"castSpell":{"spellId":{"spellId":3043}}}');M.fromJsonString('{"condition":{"not":{"val":{"dotIsActive":{"spellId":{"spellId":49067}}}}},"castSpell":{"spellId":{"tag":1,"spellId":49067}}}');const d=M.fromJsonString('{"castSpell":{"spellId":{"spellId":58434}}}'),p=M.fromJsonString('{"castSpell":{"spellId":{"spellId":61006}}}'),c=M.fromJsonString('{"castSpell":{"spellId":{"spellId":49050}}}'),m=M.fromJsonString('{"castSpell":{"spellId":{"spellId":49048}}}'),S=M.fromJsonString('{"castSpell":{"spellId":{"spellId":49052}}}'),u=M.fromJsonString('{"castSpell":{"spellId":{"spellId":34490}}}'),I=M.fromJsonString('{"castSpell":{"spellId":{"spellId":53209}}}'),g=M.fromJsonString('{"castSpell":{"spellId":{"spellId":63672}}}'),f=M.fromJsonString('{"condition":{"not":{"val":{"dotIsActive":{"spellId":{"spellId":60053}}}}},"castSpell":{"spellId":{"spellId":60053}}}');M.fromJsonString('{"condition":{"dotIsActive":{"spellId":{"spellId":60053}}},"castSpell":{"spellId":{"spellId":60052}}}');const h=e.getTalentTree();return t.type==n.Aoe?o.push(...[t.sting==s.ScorpidSting?r:null,t.sting==s.SerpentSting?i:null,d].filter((e=>e))):0==h?o.push(...[p,t.sting==s.ScorpidSting?r:null,t.sting==s.SerpentSting?i:null,c,m,S].filter((e=>e))):1==h?o.push(...[u,p,t.sting==s.ScorpidSting?r:null,t.sting==s.SerpentSting?i:null,I,c,m,S].filter((e=>e))):2==h&&o.push(...[p,f,t.sting==s.ScorpidSting?r:null,t.sting==s.SerpentSting?i:null,g,c,m,S].filter((e=>e))),C.create({prepullActions:l,priorityList:o.map((e=>N.create({action:e})))})},raidSimPresets:[{spec:H.SpecHunter,tooltip:"Beast Mastery Hunter",defaultName:"Beast Mastery",iconUrl:b(O.ClassHunter,0),talents:Ie.data,specOptions:Pe,consumes:Te,defaultFactionRaces:{[U.Unknown]:v.RaceUnknown,[U.Alliance]:v.RaceNightElf,[U.Horde]:v.RaceOrc},defaultGear:{[U.Unknown]:{},[U.Alliance]:{1:se[d.Phase1][0].gear},[U.Horde]:{1:se[d.Phase1][0].gear}}},{spec:H.SpecHunter,tooltip:"Marksmanship Hunter",defaultName:"Marksmanship",iconUrl:b(O.ClassHunter,1),talents:ge.data,specOptions:ve,consumes:Te,defaultFactionRaces:{[U.Unknown]:v.RaceUnknown,[U.Alliance]:v.RaceNightElf,[U.Horde]:v.RaceOrc},defaultGear:{[U.Unknown]:{},[U.Alliance]:{1:se[d.Phase1][1].gear},[U.Horde]:{1:se[d.Phase1][1].gear}}},{spec:H.SpecHunter,tooltip:"Survival Hunter",defaultName:"Survival",iconUrl:b(O.ClassHunter,2),talents:fe.data,specOptions:ve,consumes:Te,defaultFactionRaces:{[U.Unknown]:v.RaceUnknown,[U.Alliance]:v.RaceNightElf,[U.Horde]:v.RaceOrc},defaultGear:{[U.Unknown]:{},[U.Alliance]:{1:se[d.Phase1][2].gear},[U.Horde]:{1:se[d.Phase1][2].gear}}}]});class we extends _{constructor(e,t){super(e,t,Ae)}}export{we as H};
//# sourceMappingURL=sim-df37450c.chunk.js.map
